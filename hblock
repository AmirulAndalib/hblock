#!/bin/sh

# Version:    2.1.7
# Author:     Héctor Molinero Fernández <hector@molinero.dev>
# License:    MIT, https://opensource.org/licenses/MIT
# Repository: https://github.com/hectorm/hblock

set -eu
export LC_ALL='C'

# Built-in header.
if [ -z "${HBLOCK_HEADER+x}" ]; then
	HOSTNAME="${HOSTNAME-"$(uname -n)"}"
	HBLOCK_HEADER="$(cat <<-EOF
		127.0.0.1       localhost ${HOSTNAME?}
		255.255.255.255 broadcasthost
		::1             localhost ${HOSTNAME?}
		::1             ip6-localhost ip6-loopback
		fe00::0         ip6-localnet
		ff00::0         ip6-mcastprefix
		ff02::1         ip6-allnodes
		ff02::2         ip6-allrouters
		ff02::3         ip6-allhosts
	EOF
	)"
fi

# Built-in footer.
if [ -z "${HBLOCK_FOOTER+x}" ]; then
	HBLOCK_FOOTER=''
fi

# Built-in sources.
if [ -z "${HBLOCK_SOURCES+x}" ]; then
	HBLOCK_SOURCES="$(cat <<-'EOF'
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/adaway.org/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/adblock-nocoin-list/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/adguard-simplified/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/antipopads/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/digitalside-threat-intel/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/disconnect.me-ad/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/disconnect.me-malvertising/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/disconnect.me-malware/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/disconnect.me-tracking/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/easylist/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/easyprivacy/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/eth-phishing-detect/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/fademind-add.2o7net/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/fademind-add.dead/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/fademind-add.risk/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/fademind-add.spam/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/gfrogeye-firstparty-trackers/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/hostsvn/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/kadhosts/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/lightswitch05-ads-and-tracking/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/malwaredomainlist.com/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/malwaredomains.com-immortaldomains/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/malwaredomains.com-justdomains/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/matomo.org-spammers/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/mitchellkrogza-badd-boyz-hosts/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/pgl.yoyo.org/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/phishing.army/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/socram8888-notonmyshift/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/someonewhocares.org/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/spam404.com/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/stevenblack/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock-abuse/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock-badware/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/ublock-privacy/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/urlhaus/list.txt
		https://raw.githubusercontent.com/hectorm/hmirror/master/data/winhelp2002.mvps.org/list.txt
	EOF
	)"
fi

# Built-in allowlist.
if [ -z "${HBLOCK_ALLOWLIST+x}" ]; then
	HBLOCK_ALLOWLIST=''
fi

# Built-in denylist.
if [ -z "${HBLOCK_DENYLIST+x}" ]; then
	HBLOCK_DENYLIST="$(cat <<-'EOF'
		# Special domain that is used to check if hBlock is enabled.
		hblock-check.molinero.dev
	EOF
	)"
fi

# Parse command line options.
optParse() {
	while [ "${#}" -gt '0' ]; do
		case "${1?}" in
			# Short options that accept an argument need a "*" in their pattern because they can be
			# found in the "-A<value>" form.
			'-O'*|'--output') optArgStr "${@-}"; outputFile="${optArg?}"; shift "${optShift:?}" ;;
			'-H'*|'--header') optArgStr "${@-}"; headerFile="${optArg?}"; shift "${optShift:?}" ;;
			'-F'*|'--footer') optArgStr "${@-}"; footerFile="${optArg?}"; shift "${optShift:?}" ;;
			'-S'*|'--sources') optArgStr "${@-}"; sourcesFile="${optArg?}"; shift "${optShift:?}" ;;
			'-A'*|'--allowlist') optArgStr "${@-}"; allowlistFile="${optArg?}"; shift "${optShift:?}" ;;
			'-D'*|'--denylist') optArgStr "${@-}"; denylistFile="${optArg?}"; shift "${optShift:?}" ;;
			'-R'*|'--redirection') optArgStr "${@-}"; redirection="${optArg?}"; shift "${optShift:?}" ;;
			'-W'*|'--wrap') optArgStr "${@-}"; wrap="${optArg?}"; shift "${optShift:?}" ;;
			'-T'*|'--template') optArgStr "${@-}"; template="${optArg?}"; shift "${optShift:?}" ;;
			'-C'*|'--comment') optArgStr "${@-}"; comment="${optArg?}"; shift "${optShift:?}" ;;
			'-l' |'--lenient'|'--no-lenient') optArgBool "${@-}"; lenient="${optArg:?}" ;;
			'-r' |'--regex'|'--no-regex') optArgBool "${@-}"; regex="${optArg:?}" ;;
			'-c' |'--continue'|'--no-continue') optArgBool "${@-}"; continue="${optArg:?}" ;;
			'-q' |'--quiet'|'--no-quiet') optArgBool "${@-}"; quiet="${optArg:?}" ;;
			'-x'*|'--color') optArgStr "${@-}"; color="${optArg?}"; shift "${optShift:?}" ;;
			'-v' |'--version') showVersion ;;
			'-h' |'--help') showHelp ;;
			# If "--" is found, the remaining positional arguments are saved and the parsing ends.
			--) shift; posArgs="${posArgs-} ${*-}"; break ;;
			# If a long option in the form "--opt=value" is found, it is split into "--opt" and "value".
			--*=*) optSplitEquals "${@-}"; shift; set -- "${optName:?}" "${optArg?}" "${@-}"; continue ;;
			# If an option did not match any pattern, an error is thrown.
			-?|--*) optDie "Illegal option ${1:?}" ;;
			# If multiple short options in the form "-AB" are found, they are split into "-A" and "-B".
			-?*) optSplitShort "${@-}"; shift; set -- "${optAName:?}" "${optBName:?}" "${@-}"; continue ;;
			# If a positional argument is found, it is saved.
			*) posArgs="${posArgs-} ${1?}" ;;
		esac
		shift
	done
}
optSplitShort() {
	optAName="${1%"${1#??}"}"; optBName="-${1#??}"
}
optSplitEquals() {
	optName="${1%="${1#--*=}"}"; optArg="${1#--*=}"
}
optArgStr() {
	if [ -n "${1#??}" ] && [ "${1#--}" = "${1:?}" ]; then optArg="${1#??}"; optShift='0';
	elif [ -n "${2+x}" ]; then optArg="${2-}"; optShift='1';
	else optDie "No argument for ${1:?} option"; fi
}
optArgBool() {
	if [ "${1#--no-}" = "${1:?}" ]; then optArg='true';
	else optArg='false'; fi
}
optDie() {
	printf -- '%s\n' "${@-}" "Try 'hblock --help' for more information" >&2
	exit 2
}

# Show help and quit.
showHelp() {
	printf -- '%s\n' "$(sed -e 's/%NL/\n/g' <<-EOF
		Usage: hblock [OPTION]...

		hBlock is a POSIX-compliant shell script that gets a list of domains that serve
		ads, tracking scripts and malware from multiple sources and creates a hosts
		file, among other formats, that prevents your system from connecting to them.

		Options:%NL
		 -O, --output <FILE>, \${HBLOCK_OUTPUT_FILE}%NL
		        Output file location.%NL
		        (default: ${outputFileDefault?})%NL
		 -H, --header <FILE>, \${HBLOCK_HEADER_FILE}%NL
		        File to be included at the beginning of the output file.%NL
		        If the default file does not exist or equals "builtin" the built-in
		        value is used instead.%NL
		        (default: ${headerFileDefault?})%NL
		 -F, --footer <FILE>, \${HBLOCK_FOOTER_FILE}%NL
		        File to be included at the end of the output file.%NL
		        If the default file does not exist or equals "builtin" the built-in
		        value is used instead.%NL
		        (default: ${footerFileDefault?})%NL
		 -S, --sources <FILE>, \${HBLOCK_SOURCES_FILE}%NL
		        File with line separated URLs used to generate the blocklist.%NL
		        If the default file does not exist or equals "builtin" the built-in
		        value is used instead.%NL
		        (default: ${sourcesFileDefault?})%NL
		 -A, --allowlist <FILE>, \${HBLOCK_ALLOWLIST_FILE}%NL
		        File with line separated entries to be removed from the blocklist.%NL
		        If the default file does not exist or equals "builtin" the built-in
		        value is used instead.%NL
		        (default: ${allowlistFile?})%NL
		 -D, --denylist <FILE>, \${HBLOCK_DENYLIST_FILE}%NL
		        File with line separated entries to be added to the blocklist.%NL
		        If the default file does not exist or equals "builtin" the built-in
		        value is used instead.%NL
		        (default: ${denylistFile?})%NL
		 -R, --redirection <REDIRECTION>, \${HBLOCK_REDIRECTION}%NL
		        Redirection for all entries in the blocklist.%NL
		        (default: ${redirectionDefault?})%NL
		 -W, --wrap <NUMBER>, \${HBLOCK_WRAP}%NL
		        Break blocklist lines after this number of entries.%NL
		        (default: ${wrapDefault?})%NL
		 -T, --template <TEMPLATE>, \${HBLOCK_TEMPLATE}%NL
		        Template applied to each entry.%NL
		        %D = <DOMAIN>, %R = <REDIRECTION>%NL
		        (default: ${templateDefault?})%NL
		 -C, --comment <COMMENT>, \${HBLOCK_COMMENT}%NL
		        Character used for comments.%NL
		        (default: ${commentDefault?})%NL
		 -l, --[no-]lenient, \${HBLOCK_LENIENT}%NL
		        Match all entries from sources regardless of their IP, instead
		        of 0.0.0.0, 127.0.0.1, ::, ::1 or nothing.%NL
		        (default: ${lenientDefault?})%NL
		 -r, --[no-]regex, \${HBLOCK_REGEX}%NL
		        Use POSIX BREs in the allowlist instead of fixed strings.%NL
		        (default: ${regexDefault?})%NL
		 -c, --[no-]continue, \${HBLOCK_CONTINUE}%NL
		        Do not abort if a download error occurs.%NL
		        (default: ${continueDefault?})%NL
		 -q, --[no-]quiet, \${HBLOCK_QUIET}%NL
		        Suppress non-error messages.%NL
		        (default: ${quietDefault?})%NL
		 -x, --color <auto|true|false>, \${HBLOCK_COLOR}%NL
		        Colorize the output.%NL
		        (default: ${colorDefault?})%NL
		 -v, --version%NL
		        Show version number and quit.%NL
		 -h, --help%NL
		        Show this help and quit.

		Report bugs to: <https://github.com/hectorm/hblock/issues>
	EOF
	)"
	exit 0
}

# Show version number and quit.
showVersion() {
	getMetadata() { sed -ne 's|^# '"${1:?}"':[[:blank:]]*\(.\{1,\}\)$|\1|p' -- "${0:?}"; }
	printf -- '%s\n' "$(cat <<-EOF
		hBlock $(getMetadata 'Version')
		Author: $(getMetadata 'Author')
		License: $(getMetadata 'License')
		Repository: $(getMetadata 'Repository')
	EOF
	)"
	exit 0
}

# Check if a program exists.
exists() {
	# shellcheck disable=SC2230
	if command -v true; then command -v -- "${1:?}"
	elif eval type type; then eval type -- "${1:?}"
	else which -- "${1:?}"; fi >/dev/null 2>&1
}

# Pretty print methods.
printInfo() {
	if [ "${quiet-}" != 'true' ]; then
		if [ "${color-}" != 'true' ]; then printf -- '[INFO] %s\n' "${@-}"
		else printf -- '\033[0m[\033[1;32mINFO\033[0m] %s\n' "${@-}"; fi
	fi
}
printWarn() {
	if [ "${color-}" != 'true' ]; then printf -- '[WARN] %s\n' "${@-}" >&2
	else printf -- '\033[0m[\033[1;33mWARN\033[0m] %s\n' "${@-}"; fi
}
printError() {
	if [ "${color-}" != 'true' ]; then printf -- '[ERROR] %s\n' "${@-}" >&2
	else printf -- '\033[0m[\033[1;31mERROR\033[0m] %s\n' "${@-}"; fi
}
printList() {
	if [ "${quiet-}" != 'true' ]; then
		if [ "${color-}" != 'true' ]; then printf -- ' * %s\n' "${@-}"
		else printf -- '\033[0m \033[1;36m*\033[0m %s\n' "${@-}"; fi
	fi
}

# Create a temporary directory.
createTempDir() {
	if exists mktemp; then mktemp -d
	else
		# Since POSIX does not specify mktemp utility, use this as fallback.
		# And wait a second as a horrible hack to avoid name collisions.
		rnd="$(sleep 1; awk 'BEGIN{srand();printf("%08x",rand()*(2**31-1))}')"
		dir="${TMPDIR:-/tmp}/tmp.${$}${rnd:?}"
		(umask 077 && mkdir -- "${dir:?}")
		printf -- '%s' "${dir:?}"
	fi
}

# Print to stdout the contents of a URL.
fetchUrl() {
	# If the protocol is "file://" we can omit the download and simply use cat.
	if [ "${1#file://}" != "${1:?}" ]; then cat -- "${1#file://}"
	else
		userAgent='Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'
		if exists curl; then curl -fsSL -A "${userAgent:?}" -- "${1:?}"
		elif exists wget; then wget -qO- -U "${userAgent:?}" -- "${1:?}"
		elif exists fetch; then fetch -qo- --user-agent="${userAgent:?}" -- "${1:?}"
		else
			printError 'curl, wget or fetch are required for this script'
			exit 1
		fi
	fi
}

main() {
	# Output file location.
	outputFileDefault="${HBLOCK_OUTPUT_FILE-/etc/hosts}"
	outputFile="${outputFileDefault?}"

	# File to be included at the beginning of the output file.
	headerFileDefault="${HBLOCK_HEADER_FILE-/etc/hblock/header}"
	headerFile="${headerFileDefault?}"

	# File to be included at the end of the output file.
	footerFileDefault="${HBLOCK_FOOTER_FILE-/etc/hblock/footer}"
	footerFile="${footerFileDefault?}"

	# File with line separated URLs used to generate the blocklist.
	sourcesFileDefault="${HBLOCK_SOURCES_FILE-/etc/hblock/sources.list}"
	sourcesFile="${sourcesFileDefault?}"

	# File with line separated entries to be removed from the blocklist.
	allowlistFileDefault="${HBLOCK_ALLOWLIST_FILE-/etc/hblock/allow.list}"
	allowlistFile="${allowlistFileDefault?}"

	# File with line separated entries to be added to the blocklist.
	denylistFileDefault="${HBLOCK_DENYLIST_FILE-/etc/hblock/deny.list}"
	denylistFile="${denylistFileDefault?}"

	# Redirection for all entries in the blocklist.
	redirectionDefault="${HBLOCK_REDIRECTION-0.0.0.0}"
	redirection="${redirectionDefault?}"

	# Break blocklist lines after this number of entries.
	wrapDefault="${HBLOCK_WRAP-1}"
	wrap="${wrapDefault?}"

	# Template applied to each entry.
	templateDefault="${HBLOCK_TEMPLATE-%R %D}"
	template="${templateDefault?}"

	# Character used for comments.
	commentDefault="${HBLOCK_COMMENT-#}"
	comment="${commentDefault?}"

	# Match all entries from sources, regardless of their IP.
	lenientDefault="${HBLOCK_LENIENT-false}"
	lenient="${lenientDefault?}"

	# Use POSIX BREs instead of fixed strings.
	regexDefault="${HBLOCK_REGEX-false}"
	regex="${regexDefault?}"

	# Abort if a download error occurs.
	continueDefault="${HBLOCK_CONTINUE-false}"
	continue="${continueDefault?}"

	# Colorize the output.
	colorDefault="${HBLOCK_COLOR-auto}"
	color="${colorDefault?}"

	# Suppress non-error messages.
	quietDefault="${HBLOCK_QUIET-false}"
	quiet="${quietDefault?}"

	# Parse command line options.
	# shellcheck disable=SC2086
	{ optParse "${@-}"; set -- ${posArgs-}; }

	if [ "${color:?}" = 'auto' ]; then
		# Check color support, but honor ${NO_COLOR} variable (https://no-color.org).
		if [ -t 1 ] && [ -z "${NO_COLOR+x}" ]; then
			color='true'
		else
			color='false'
		fi
	fi

	# Create a temporary work directory.
	tmpWorkDir="$(createTempDir)"
	trap 'rm -rf -- "${tmpWorkDir:?}"; trap - EXIT; exit 0' EXIT TERM INT HUP

	# Check if the header file exists.
	if [ ! -e "${headerFile:?}" ]; then
		# If it is the default path or equals "builtin", use the built-in value instead.
		if [ "${headerFile:?}" = "${headerFileDefault:?}" ] || [ "${headerFile:?}" = 'builtin' ]; then
			headerFile="${tmpWorkDir:?}/header"
			printf -- '%s' "${HBLOCK_HEADER?}" > "${headerFile:?}"
		else
			printError "No such file: ${headerFile:?}"
			exit 1
		fi
	fi

	# Check if the footer file exists.
	if [ ! -e "${footerFile:?}" ]; then
		# If it is the default path or equals "builtin", use the built-in value instead.
		if [ "${footerFile:?}" = "${footerFileDefault:?}" ] || [ "${footerFile:?}" = 'builtin' ]; then
			footerFile="${tmpWorkDir:?}/footer"
			printf -- '%s' "${HBLOCK_FOOTER?}" > "${footerFile:?}"
		else
			printError "No such file: ${footerFile:?}"
			exit 1
		fi
	fi

	# Check if the sources file exists.
	if [ ! -e "${sourcesFile:?}" ]; then
		# If it is the default path or equals "builtin", use the built-in value instead.
		if [ "${sourcesFile:?}" = "${sourcesFileDefault:?}" ] || [ "${sourcesFile:?}" = 'builtin' ]; then
			sourcesFile="${tmpWorkDir:?}/sources.list"
			printf -- '%s' "${HBLOCK_SOURCES?}" > "${sourcesFile:?}"
		else
			printError "No such file: ${sourcesFile:?}"
			exit 1
		fi
	fi

	# Check if the allowlist file exists.
	if [ ! -e "${allowlistFile:?}" ]; then
		# If it is the default path or equals "builtin", use the built-in value instead.
		if [ "${allowlistFile:?}" = "${allowlistFileDefault:?}" ] || [ "${allowlistFile:?}" = 'builtin' ]; then
			allowlistFile="${tmpWorkDir:?}/allow.list"
			printf -- '%s' "${HBLOCK_ALLOWLIST?}" > "${allowlistFile:?}"
		else
			printError "No such file: ${allowlistFile:?}"
			exit 1
		fi
	fi

	# Check if the denylist file exists.
	if [ ! -e "${denylistFile:?}" ]; then
		# If it is the default path or equals "builtin", use the built-in value instead.
		if [ "${denylistFile:?}" = "${denylistFileDefault:?}" ] || [ "${denylistFile:?}" = 'builtin' ]; then
			denylistFile="${tmpWorkDir:?}/deny.list"
			printf -- '%s' "${HBLOCK_DENYLIST?}" > "${denylistFile:?}"
		else
			printError "No such file: ${denylistFile:?}"
			exit 1
		fi
	fi

	# Create an empty blocklist file.
	blocklistFile="${tmpWorkDir:?}/block.list"
	:> "${blocklistFile:?}"

	# If the sources file is not empty, each entry is downloaded and appended to the blocklist file.
	if [ -s "${sourcesFile:?}" ]; then
		printInfo 'Downloading lists'

		# Read the sources file ignoring lines that start with "#" or are empty.
		sed -e '/^#/d;/^$/d' -- "${sourcesFile:?}" | while IFS= read -r url || [ -n "${url?}" ]; do
			printList "${url:?}"
			if ! fetchUrl "${url:?}" >> "${blocklistFile:?}"; then
				if [ "${continue:?}" = 'true' ]; then
					printWarn "Cannot obtain source: ${url:?}"
				else
					printError "Cannot obtain source: ${url:?}"
					exit 1
				fi
			fi
		done

		printInfo 'Parsing lists'

		printList 'Removing carriage return'
		tr -d '\r' \
			< "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Transforming to lowercase'
		awk '{print(tolower($0))}' \
			< "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Removing comments'
		sed -e 's/#.*//' \
			-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Trimming spaces'
		sed -e 's/^[[:blank:]]*//' \
			-e 's/[[:blank:]]*$//' \
			-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Matching hosts lines'
		if [ "${lenient:?}" = 'true' ]; then
			# This regex is not ideal as it matches technically invalid addresses, but it is POSIX-compliant.
			ipv4Regex='\(\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}\)\{0,1\}'
			ipv6Regex='\(\([0-9a-f]\{0,4\}:\)\{1,7\}[0-9a-f]\{0,4\}\)\{0,1\}'
			ipRegex="${ipv4Regex:?}${ipv6Regex:?}"
		else
			# This regex is not ideal as it matches technically invalid addresses, but it is POSIX-compliant.
			ipv4Regex='\(0\.0\.0\.0\)\{0,1\}\(127\.0\.0\.1\)\{0,1\}'
			ipv6Regex='\(::\)\{0,1\}\(::1\)\{0,1\}'
			ipRegex="${ipv4Regex:?}${ipv6Regex:?}"
		fi
		domainRegex='\([0-9a-z_-]\{1,63\}\.\)\{1,\}[a-z][0-9a-z_-]\{1,62\}'
		sed -ne '/^\('"${ipRegex:?}"'[[:blank:]]\{1,\}\)\{0,1\}'"${domainRegex:?}"'$/p' \
			-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Removing reserved TLDs'
		sed -e '/\.corp$/d' \
			-e '/\.domain$/d' \
			-e '/\.example$/d' \
			-e '/\.home$/d' \
			-e '/\.host$/d' \
			-e '/\.invalid$/d' \
			-e '/\.lan$/d' \
			-e '/\.local$/d' \
			-e '/\.localdomain$/d' \
			-e '/\.localhost$/d' \
			-e '/\.test$/d' \
			-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"

		printList 'Removing destination IPs'
		sed -e 's/^.\{1,\}[[:blank:]]\{1,\}//' \
			-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
	fi

	# If the denylist file is not empty, it is appended to the blocklist file.
	if [ -s "${denylistFile:?}" ]; then
		printInfo 'Applying denylist'
		sed -e '/^#/d;/^$/d' -- "${denylistFile:?}" >> "${blocklistFile:?}"
	fi

	# If the blocklist file is not empty, it is sorted.
	if [ -s "${blocklistFile:?}" ]; then
		printInfo 'Sorting entries'

		sort -- "${blocklistFile:?}" | uniq | sed -e '/^$/d' > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
	fi

	# If the allowlist file is not empty, the entries on it are removed from the blocklist file.
	if [ -s "${allowlistFile:?}" ]; then
		printInfo 'Applying allowlist'

		# Entries are treated as regexes depending on whether the regex option is enabled.
		sed -e '/^#/d;/^$/d' -- "${allowlistFile:?}" >> "${blocklistFile:?}.pat"
		if [ "${regex:?}" = 'true' ]; then
			grep -vf "${blocklistFile:?}.pat" \
				-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
				&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
		else
			grep -Fxvf "${blocklistFile:?}.pat" \
				-- "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
				&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
		fi
		rm -f "${blocklistFile:?}.pat"
	fi

	# Count blocked domains.
	blocklistCount="$(wc -l < "${blocklistFile:?}" | tr -d ' ')"

	# If the blocklist file is not empty, the format template is applied.
	if [ -s "${blocklistFile:?}" ]; then
		printInfo 'Applying format template'

		# The number of domains per line is equal to the value of the wrap option.
		if [ "${wrap:?}" -gt '1' ]; then
			awk -v FS=' ' -v RS='\n' -v W="${wrap:?}" '{ORS=(NR%W?FS:RS)}1;END{if(NR%W){printf(RS)}}' \
				< "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
				&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
		fi

		# The following awk script replaces in the template the variables starting with a % sign with their value.
		# Using something like '{E=T;D=$0;gsub("%D",D,E);gsub("%R",R,E);print(E)}' would be much simpler,
		# but I have found that in nawk it performs very poorly.
		awkTemplateScript="$(cat <<-'EOF'
			BEGIN { split(T, c, ""); l=length(T); o="" } {
				for (i=1; i<=l; i++) {
					if (c[i]=="%") {
						i++; if (c[i]=="D") o=o $0
						else if (c[i]=="R") o=o R
						else if (c[i]=="%") o=o "%%"
					} else { o=o c[i] }
				}; print(o); o=""
			}
		EOF
		)"
		awk -v T="${template?}" -v R="${redirection?}" "${awkTemplateScript:?}" \
			< "${blocklistFile:?}" > "${blocklistFile:?}.aux" \
			&& mv -f -- "${blocklistFile:?}.aux" "${blocklistFile:?}"
	fi

	# Create an auxiliary output file.
	outputFileAux="${tmpWorkDir:?}/output"
	:> "${outputFileAux:?}"

	# Define "C" variable for convenience.
	C="${comment?}"

	# Append banner to the output file.
	if [ -n "${C?}" ]; then
		cat <<-EOF >> "${outputFileAux:?}"
			${C?} Generated with:  https://github.com/hectorm/hblock
			${C?} Blocked domains: ${blocklistCount:?}
		EOF
	fi

	# If the header file is not empty, it is appended to the output file.
	if [ -s "${headerFile:?}" ]; then
		[ -z "${C?}" ] || printf -- '\n%s\n' "${C?} BEGIN HEADER" >> "${outputFileAux:?}"
		awk 1 < "${headerFile:?}" >> "${outputFileAux:?}"
		[ -z "${C?}" ] || printf -- '%s\n' "${C?} END HEADER" >> "${outputFileAux:?}"
	fi

	# If the blocklist file is not empty, it is appended to the output file.
	if [ -s "${blocklistFile:?}" ]; then
		[ -z "${C?}" ] || printf -- '\n%s\n' "${C?} BEGIN BLOCKLIST" >> "${outputFileAux:?}"
		awk 1 < "${blocklistFile:?}" >> "${outputFileAux:?}"
		[ -z "${C?}" ] || printf -- '%s\n' "${C?} END BLOCKLIST" >> "${outputFileAux:?}"
	fi

	# If the footer file is not empty, it is appended to the output file.
	if [ -s "${footerFile:?}" ]; then
		[ -z "${C?}" ] || printf -- '\n%s\n' "${C?} BEGIN FOOTER" >> "${outputFileAux:?}"
		awk 1 < "${footerFile:?}" >> "${outputFileAux:?}"
		[ -z "${C?}" ] || printf -- '%s\n' "${C?} END FOOTER" >> "${outputFileAux:?}"
	fi

	# Print to stdout if the output file is "-".
	if [ "${outputFile:?}" = '-' ]; then
		cat -- "${outputFileAux:?}"
	else
		printInfo 'Writing output file'

		# Try writing the output file.
		if touch -- "${outputFile:?}" >/dev/null 2>&1; then
			cat -- "${outputFileAux:?}" > "${outputFile:?}"
		# Try with sudo if the writing fails.
		elif exists sudo && exists tee; then
			# shellcheck disable=SC2024
			sudo tee -- "${outputFile:?}" < "${outputFileAux:?}" >/dev/null
		else
			printError "Cannot write file: ${outputFile:?}"
			exit 1
		fi
	fi

	# Remove the auxiliary output file.
	rm -f "${outputFileAux:?}"

	printInfo "${blocklistCount:?} blocked domains!"
}

main "${@-}"
